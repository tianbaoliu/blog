(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{689:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git简单配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git简单配置"}},[t._v("#")]),t._v(" git简单配置")]),t._v(" "),s("p",[t._v("拉取项目到本地，并配置git提交时的用户信息")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git clone 项目地址\ngit config --global user.name "用户名"\ngit config --global user.email "邮箱"\n')])])]),s("h2",{attrs:{id:"branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[t._v("#")]),t._v(" branch")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git branch              列出所有本地分支\ngit branch -r           列出所有远程分支\ngit branch -a           列出所有本地分支和远程分支\ngit branch 分支名        新建本地分支\ngit branch -d 分支名     删除本地分支\n")])])]),s("h2",{attrs:{id:"checkout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#checkout"}},[t._v("#")]),t._v(" checkout")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout 分支名                 切换分支，没有则新建分支\ngit checkout -b 分支名              新建分支，并切换到该分支\ngit checkout 提交版本号 -b 分支名     基于某个commit提交创建分支\ngit checkout -- 文件名              放弃单个未使用git add缓存的文件修改\ngit checkout .                     放弃所有未使用git add缓存文件的修改\n")])])]),s("h2",{attrs:{id:"fetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fetch"}},[t._v("#")]),t._v(" fetch")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git fetch origin 分支名          拉取指定分支到本地，不合并\n简写：git fetch\n")])])]),s("h2",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git merge 分支名                 合并分支\ngit merge --continue            合并时有修改但无冲突，执行此命令继续\n快捷键：shift（按住） + z（按两次z）\n")])])]),s("h2",{attrs:{id:"add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" add")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git add 文件名      提交指定文件修改到缓存区\ngit add .          提交所有修改到缓存区\n")])])]),s("h2",{attrs:{id:"commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" commit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git commit -m "注释"     提交缓存区到本地仓库\n')])])]),s("h2",{attrs:{id:"pull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[t._v("#")]),t._v(" pull")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git pull origin 分支名              拉取远程分支代码更新合并\n简写：git pull\n等同于：git fetch + git merge\n")])])]),s("h2",{attrs:{id:"push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" push")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git push origin 分支名       上传代码到远程仓库\n简写：git push\n\ngit push -u origin 分支名     -u 表示第一次推送分支的所有内容，后面再推送就不需要-u了\ngit push origin -d 分支名     删除远程分支\n")])])]),s("h2",{attrs:{id:"cherry-pick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[t._v("#")]),t._v(" cherry-pick")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git cherry-pick 提交版本号         某次commit合并到指定分支，如master，需要切换到master分支下执行此命令\ngit cherry-pick --continue       合并时有修改但无冲突，执行此命令继续\ngit cherry-pick --abort          撤销上次cherry-pick\n")])])]),s("h2",{attrs:{id:"reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset HEAD            取消所有add文件的修改，不影响已经commit了的文件\ngit reset HEAD 文件名      取消指定add文件的修改，不影响已经commit了的文件\n                \ngit reset --hard HEAD^          回滚代码到上一次commit\ngit reset --hard 提交版本号       回滚代码到某个commit\n")])])]),s("h2",{attrs:{id:"bisect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bisect"}},[t._v("#")]),t._v(" bisect")]),t._v(" "),s("h4",{attrs:{id:"git-bisect是用来查找哪一次代码提交引入了错误-查找两次提交之间的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-bisect是用来查找哪一次代码提交引入了错误-查找两次提交之间的问题"}},[t._v("#")]),t._v(" git bisect是用来查找哪一次代码提交引入了错误，查找两次提交之间的问题")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式 ：git bisect start [终点版本号] [起点版本号]\n\n1、首先，检查一下代码提交历史 （比如有101次提交）\n   git log --pretty=oneline\n\n2、执行下面的命令以后，代码库就会切换到这段范围内的中间的（第51次）一个提交版本\n   git bisect start HEAD 4d83cf     起点是第一次提交4d83cf，终点是最近一次的HEAD\n\n3、如果此版本没有问题，执行下面的命令 （说明问题出现在此版本之后，继续执行上面命令查找问题）\n   git bisect good                  标识本次提交没有问题\n\n4、如果没有问题，继续执行第二步骤，此时会切换到第76次提交，如果有问题，继续往下\n\n5、如果发现此次提交版本有问题，执行下面命令，就自动切换到第51次到第76次的中点，第63次提交\n   git bisect bad                   标识本次提交有问题\n\n6、不断重复这个过程，直到成功找到出问题的那一次提交为止，Git会提示\n   b47892 is the first bad commit\n\n7、最后，执行以下命令\n   git bisect reset                 退出查错，回到最近一次的代码提交\n\n8、开始修复错误，判断是否错，去页面点吧点吧\n")])])]),s("h2",{attrs:{id:"其他命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他命令"}},[t._v("#")]),t._v(" 其他命令")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git log                     查看日志，查看commit所有提交版本\ngit status                  显示所有修改的文件\ngit rm 文件名                删除指定文件\ngit diff 文件名              比较文件修改后的差异，commit之前\ngit remote remove origin    删除远端仓库\n")])])]),s("h2",{attrs:{id:"强制提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制提交"}},[t._v("#")]),t._v(" 强制提交")]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("强制提交，并且删除此次提交之后的版本（除非只有自己一个人用，不然用此命令的都要把手剁了！！！）")])],1),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git push -f     了解就行，没把握别用\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("假设一个场景")]),t._v(" "),s("p",[t._v("将代码回退到10个commit版本之前，然后修改后，强制提交，那么在此提交后的10个版本就会被删除，如果多人协作，会删除别人的提交。"),s("br"),t._v("\n为什么会强制提交：原因是回退到某个commit后，必须要先pull才能正常push，如果先pull一下，又会回到最新版本的提交，那么commit回退就没意义了。"),s("br"),t._v("\n建议：如果碰到此类问题，建议基于commit提交版本号拉取新分支在做修改")])]),t._v(" "),s("h2",{attrs:{id:"清除git缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清除git缓存"}},[t._v("#")]),t._v(" 清除git缓存")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",[t._v("应用场景，如：文件名称大小写修改，同名图片替换，因为有缓存，不会提交跟新，此时需要清除后重新提交，完整操作流程：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git rm -r --cache .\ngit add .\ngit commit -m '...'\n")])])]),s("h2",{attrs:{id:"提交五步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交五步"}},[t._v("#")]),t._v(" 提交五步")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1、git pull      取回远程主机某个分支的更新，再与本地的指定分支合并\n2、git status    查看状态，是否冲突\n3、git add .     将修改保存到缓存区\n4、git commit -m "注释"      提交缓存区到本地仓库\n5、git push origin 分支名    提交到远程分支\n')])])]),s("h2",{attrs:{id:"查看用户提交行数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看用户提交行数"}},[t._v("#")]),t._v(" 查看用户提交行数")]),t._v(" "),s("h4",{attrs:{id:"统计指定用户代码提交情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#统计指定用户代码提交情况"}},[t._v("#")]),t._v(" 统计指定用户代码提交情况")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('使用 git config user.name 命令查看git用户名\n\n切换到指定项目下执行：\ngit log --author="你的git用户名" --pretty=tformat: --numstat | awk \'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\\n", add, subs, loc }\' -\n\n例如：\ngit log --author="liutianbao" --pretty=tformat: --numstat | awk \'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\\n", add, subs, loc }\' -\n')])])]),s("h4",{attrs:{id:"统计所有人代码提交情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#统计所有人代码提交情况"}},[t._v("#")]),t._v(" 统计所有人代码提交情况")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('切换到指定项目下执行：\ngit log --format=\'%aN\' | sort -u | while read name; do echo -en "$name\\t"; git log --author="$name" --pretty=tformat: --numstat | awk \'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\\n", add, subs, loc }\' -; done\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);